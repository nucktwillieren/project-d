// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package xlimit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XLimitClient is the client API for XLimit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XLimitClient interface {
	CheckAndIncrease(ctx context.Context, in *XLimitCheckRequest, opts ...grpc.CallOption) (*XLimitCheckReply, error)
	Reset(ctx context.Context, in *XLimitResetRequest, opts ...grpc.CallOption) (*XLimitCheckReply, error)
}

type xLimitClient struct {
	cc grpc.ClientConnInterface
}

func NewXLimitClient(cc grpc.ClientConnInterface) XLimitClient {
	return &xLimitClient{cc}
}

func (c *xLimitClient) CheckAndIncrease(ctx context.Context, in *XLimitCheckRequest, opts ...grpc.CallOption) (*XLimitCheckReply, error) {
	out := new(XLimitCheckReply)
	err := c.cc.Invoke(ctx, "/XLimit/CheckAndIncrease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xLimitClient) Reset(ctx context.Context, in *XLimitResetRequest, opts ...grpc.CallOption) (*XLimitCheckReply, error) {
	out := new(XLimitCheckReply)
	err := c.cc.Invoke(ctx, "/XLimit/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XLimitServer is the server API for XLimit service.
// All implementations must embed UnimplementedXLimitServer
// for forward compatibility
type XLimitServer interface {
	CheckAndIncrease(context.Context, *XLimitCheckRequest) (*XLimitCheckReply, error)
	Reset(context.Context, *XLimitResetRequest) (*XLimitCheckReply, error)
	mustEmbedUnimplementedXLimitServer()
}

// UnimplementedXLimitServer must be embedded to have forward compatible implementations.
type UnimplementedXLimitServer struct {
}

func (UnimplementedXLimitServer) CheckAndIncrease(context.Context, *XLimitCheckRequest) (*XLimitCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAndIncrease not implemented")
}
func (UnimplementedXLimitServer) Reset(context.Context, *XLimitResetRequest) (*XLimitCheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedXLimitServer) mustEmbedUnimplementedXLimitServer() {}

// UnsafeXLimitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XLimitServer will
// result in compilation errors.
type UnsafeXLimitServer interface {
	mustEmbedUnimplementedXLimitServer()
}

func RegisterXLimitServer(s grpc.ServiceRegistrar, srv XLimitServer) {
	s.RegisterService(&XLimit_ServiceDesc, srv)
}

func _XLimit_CheckAndIncrease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XLimitCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XLimitServer).CheckAndIncrease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/XLimit/CheckAndIncrease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XLimitServer).CheckAndIncrease(ctx, req.(*XLimitCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XLimit_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XLimitResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XLimitServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/XLimit/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XLimitServer).Reset(ctx, req.(*XLimitResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XLimit_ServiceDesc is the grpc.ServiceDesc for XLimit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XLimit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "XLimit",
	HandlerType: (*XLimitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAndIncrease",
			Handler:    _XLimit_CheckAndIncrease_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _XLimit_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/xlimit/xlimit.proto",
}
